{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { useSnackbar } from \"notistack\";\nimport { useDispatch } from 'react-redux';\nimport { accionTime } from '../../redux/accion';\nimport AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\nimport { allCancel } from '../../utils/api';\n\nfunction RelojLimit({\n  user,\n  alumno\n}) {\n  const {\n    0: sock,\n    1: setSock\n  } = useState(null);\n  useEffect(() => {\n    fetch(\"/api/socket\");\n    const socket = io();\n    socket.on(\"connect\", () => {\n      console.log(`user ${user.uid} connect`);\n    });\n    setSock(socket);\n    return () => socket.on(\"disconnect\", () => {\n      console.log(`user ${user.uid} disconnect`);\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(TimerInternal, {\n    socket: sock,\n    user: user,\n    alumno: alumno\n  });\n}\n\nfunction TimerInternal({\n  socket,\n  user,\n  alumno\n}) {\n  var _alumno$data;\n\n  const dispatch = useDispatch();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: seconds,\n    1: setSeconds\n  } = useState(alumno === null || alumno === void 0 ? void 0 : (_alumno$data = alumno.data) === null || _alumno$data === void 0 ? void 0 : _alumno$data.time);\n  const {\n    0: timer,\n    1: setTimer\n  } = useState({\n    h: null,\n    m: null,\n    s: null\n  });\n  useEffect(() => {\n    let interval = null;\n\n    if (seconds === 900) {\n      enqueueSnackbar(\"Quedan 15 minutos para finalizar\", {\n        variant: \"warning\"\n      });\n    }\n\n    if (seconds === 0) {\n      enqueueSnackbar(\"El tiempo para realizar tu examen finalizo\", {\n        variant: \"info\"\n      });\n      setSeconds(0);\n      dispatch(accionTime(0));\n      setTimer({\n        s: 0,\n        h: 0,\n        m: 0\n      });\n      socket === null || socket === void 0 ? void 0 : socket.emit(\"message\", {\n        id: user.uid,\n        time: seconds\n      });\n      allCancel({\n        id: user === null || user === void 0 ? void 0 : user.uid\n      }).then(() => {\n        window.location.replace('/home');\n      });\n    } else {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n      dispatch(accionTime(seconds));\n      setTimer({\n        s: Math.round(seconds % 0x3c),\n        h: Math.floor(seconds / 0xe10),\n        m: Math.floor(seconds / 0x3c) % 0x3c\n      });\n      socket === null || socket === void 0 ? void 0 : socket.emit(\"message\", {\n        id: user.uid,\n        time: seconds\n      });\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AccessAlarmIcon, {}), `${timer.h}H ${timer.m} M ${timer.s}S`]\n  });\n}\n\nexport default RelojLimit;","map":null,"metadata":{},"sourceType":"module"}